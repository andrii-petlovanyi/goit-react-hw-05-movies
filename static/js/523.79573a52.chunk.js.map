{"version":3,"file":"static/js/523.79573a52.chunk.js","mappings":"kSAGaA,EAAYC,EAAAA,EAAAA,IAAH,kIAQTC,EAAUD,EAAAA,EAAAA,IAAH,yFAMPE,EAAQF,EAAAA,EAAAA,IAAH,gEAKLG,EAAOH,EAAAA,EAAAA,IAAH,oFAMJI,EAAWJ,EAAAA,EAAAA,KAAH,0CAIRK,EAAQL,EAAAA,EAAAA,GAAH,0CAILM,GAAUN,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,ujBCjCPQ,EAAMR,EAAAA,EAAAA,OAAH,8hBAoBHS,GAAST,EAAAA,EAAAA,GAAOU,EAAAA,GAAPV,CAAH,kE,SC6DnB,EAnEkB,WAAO,IAAD,IAEhBW,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IACrCC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAAuBL,GAAvB,mGAE2BM,EAAAA,EAAAA,IAAmBN,GAF9C,gBAEYO,EAFZ,EAEYA,KACRH,EAAUG,GACVC,QAAQC,IAAIF,GAJhB,gDAMIC,QAAQC,IAAR,MANJ,yDADc,yBAAC,SAAD,2BAUdC,CAAQV,EACT,GAAE,CAACA,IAEJ,IAAQW,EACNR,EADMQ,MAAOC,EACbT,EADaS,SAAUC,EACvBV,EADuBU,OAAQC,EAC/BX,EAD+BW,aAAcC,EAC7CZ,EAD6CY,aAAcC,EAC3Db,EAD2Da,YAG7D,OACE,UAAChC,EAAD,YACE,SAACO,EAAD,CAAS0B,GAAIrB,EAAb,kBACCO,IACC,gCACE,UAACjB,EAAD,YACE,SAACC,EAAD,CACE+B,IACkB,OAAhBF,EACI,yDACAG,EAAAA,GAAaH,EAEnBI,IAAKT,KAEP,UAACvB,EAAD,YACE,SAACE,EAAD,UAAQqB,KACR,uBAAIC,WAGR,UAACxB,EAAD,YACE,0BACE,SAACC,EAAD,uBACCwB,EAAOQ,KAAI,SAAAC,GAAG,OAAIA,EAAIC,IAAR,IAAcC,KAAK,UAEpC,0BACE,SAACnC,EAAD,4BADF,IACsCyB,MAEtC,0BACE,SAACzB,EAAD,sBADF,IACgC0B,EAAaU,QAAQ,UAGvD,SAAC/B,EAAD,CAAQuB,GAAG,OAAOnB,MAAO,CAAEC,KAAMH,GAAjC,UACE,SAACH,EAAD,sBAEF,SAACC,EAAD,CAAQuB,GAAG,UAAUnB,MAAO,CAAEC,KAAMH,GAApC,UACE,SAACH,EAAD,yBAEF,SAAC,EAAAiC,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,WAMX,C,uNCjFKC,EAAM,mCACNC,EAAW,KAEJV,EAAa,kCAEpBW,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAAS,iCAGJ,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAA+BC,EAA/B,+BAAsC,EAAtC,kBAEoBJ,EAASK,IAAT,uCACWP,EADX,iBACuBM,EADvB,iBAFpB,UAKqB,OAHlBE,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,kCAQH/B,QAAQC,IAAR,MARG,kFAYA,SAAe+B,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,4FAA6CP,EAA7C,+BAAoD,EAApD,kBAEoBJ,EAASK,IAAT,gCACIP,EADJ,kBACiBa,EADjB,iBACqCP,EADrC,qBACsDL,IAH1E,UAKqB,OAHlBO,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,kCAQH/B,QAAQC,IAAR,MARG,kFAYA,SAAeH,EAAtB,+CAAO,OAAP,oBAAO,WAAkCoC,GAAlC,gGAEoBZ,EAASK,IAAT,iBACXO,EADW,oBACOd,EADP,qBACuBC,IAH3C,UAKqB,OAHlBO,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,gCAQH/B,QAAQC,IAAR,MARG,gFAYA,SAAekC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,gGAEoBZ,EAASK,IAAT,iBACXO,EADW,4BACed,IAHnC,UAKqB,OAHlBQ,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,gCAQH/B,QAAQC,IAAR,MARG,gFAYA,SAAemC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,gGAEoBZ,EAASK,IAAT,iBACXO,EADW,4BACed,IAHnC,UAKqB,OAHlBQ,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,gCAQH/B,QAAQC,IAAR,MARG,gF","sources":["components/TrendFilms/MovieInfo.styled.js","components/Cast/Cast.styled.js","pages/MovieInfo.jsx","service/api/fetchFilms.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: #012444;\n  width: 75%;\n  min-height: 100vh;\n`;\n\nexport const Wrapper = styled.div`\n  margin-top: 25px;\n  display: flex;\n  align-items: flex-end;\n`;\n\nexport const Image = styled.img`\n  height: 540px;\n  margin-left: 20px;\n`;\n\nexport const Desc = styled.div`\n  margin-left: 20px;\n  color: white;\n  font-weight: 500;\n`;\n\nexport const TextWrap = styled.span`\n  color: orange;\n`;\n\nexport const Title = styled.h1`\n  color: orange;\n`;\n\nexport const BackBtn = styled(NavLink)`\n  transform: scale(1);\n  transition: transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  width: 60px;\n  margin-left: 20px;\n  margin-top: 10px;\n  text-decoration: none;\n  text-align: center;\n  font-weight: 500;\n  color: orange;\n  background: rgba(255, 255, 255, 0.45);\n  -webkit-backdrop-filter: blur(7px);\n  backdrop-filter: blur(7px);\n  border: 1px solid rgba(255, 255, 255, 0.225);\n  border-radius: 10px;\n  &:hover {\n    transform: scale(1.05);\n    transition: transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Btn = styled.button`\n  transform: scale(1);\n  transition: transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  cursor: pointer;\n  padding: 10px;\n  text-decoration: none;\n  font-size: 20px;\n  font-weight: 500;\n  color: orange;\n  background: rgba(255, 255, 255, 0.45);\n  -webkit-backdrop-filter: blur(7px);\n  backdrop-filter: blur(7px);\n  border: 1px solid rgba(255, 255, 255, 0.225);\n  border-radius: 10px;\n  :hover {\n    transform: scale(1.05);\n    transition: transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n`;\n\nexport const Linked = styled(Link)`\n  margin-left: 20px;\n  cursor: default;\n`;\n","import { Outlet, useParams, useLocation } from 'react-router-dom';\n// import Spinner from 'components/Spinner/Spinner';\nimport { useState, useEffect, Suspense } from 'react';\n\nimport { contentURL, fetchInfoAboutFilm } from 'service/api/fetchFilms';\n\nimport {\n  Wrapper,\n  Image,\n  Desc,\n  TextWrap,\n  Title,\n  BackBtn,\n  Container,\n} from 'components/TrendFilms/MovieInfo.styled';\nimport { Btn, Linked } from 'components/Cast/Cast.styled';\n\nconst MovieInfo = () => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const { id } = useParams();\n  const [movies, setMovies] = useState('');\n\n  useEffect(() => {\n    async function getFilm(id) {\n      try {\n        const { data } = await fetchInfoAboutFilm(id);\n        setMovies(data);\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getFilm(id);\n  }, [id]);\n\n  const { title, overview, genres, release_date, vote_average, poster_path } =\n    movies;\n\n  return (\n    <Container>\n      <BackBtn to={backLinkHref}>Back</BackBtn>\n      {movies && (\n        <section>\n          <Wrapper>\n            <Image\n              src={\n                poster_path === null\n                  ? 'https://i.postimg.cc/MTBLYYMP/poster-not-available.jpg'\n                  : contentURL + poster_path\n              }\n              alt={title}\n            />\n            <Desc>\n              <Title>{title}</Title>\n              <p>{overview}</p>\n            </Desc>\n          </Wrapper>\n          <Desc>\n            <p>\n              <TextWrap>Genres: </TextWrap>\n              {genres.map(gen => gen.name).join(', ')}\n            </p>\n            <p>\n              <TextWrap>Release Date:</TextWrap> {release_date}\n            </p>\n            <p>\n              <TextWrap>Rating:</TextWrap> {vote_average.toFixed(1)}\n            </p>\n          </Desc>\n          <Linked to=\"cast\" state={{ from: backLinkHref }}>\n            <Btn>Cast</Btn>\n          </Linked>\n          <Linked to=\"reviews\" state={{ from: backLinkHref }}>\n            <Btn>Reviews</Btn>\n          </Linked>\n          <Suspense fallback={null}>\n            <Outlet />\n          </Suspense>\n        </section>\n      )}\n    </Container>\n  );\n};\nexport default MovieInfo;\n","import axios from 'axios';\n\nconst KEY = '07f482c2b5e827c5b265fd8211004d21';\nconst LANGUAGE = 'uk';\n\nexport const contentURL = 'https://image.tmdb.org/t/p/w500';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport async function fetchTrendFilms(page = 1) {\n  try {\n    const response = await instance.get(\n      `/trending/movie/week?api_key=${KEY}&page=${page}&language=uk`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchSearchFilms(searchQuery, page = 1) {\n  try {\n    const response = await instance.get(\n      `/search/movie?api_key=${KEY}&query=${searchQuery}&page=${page}&language=${LANGUAGE}`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchInfoAboutFilm(idFilm) {\n  try {\n    const response = await instance.get(\n      `/movie/${idFilm}?api_key=${KEY}&language=${LANGUAGE}`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchCreditsFilm(idFilm) {\n  try {\n    const response = await instance.get(\n      `/movie/${idFilm}/credits?api_key=${KEY}`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchReviewsFilm(idFilm) {\n  try {\n    const response = await instance.get(\n      `/movie/${idFilm}/reviews?api_key=${KEY}`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["Container","styled","Wrapper","Image","Desc","TextWrap","Title","BackBtn","NavLink","Btn","Linked","Link","backLinkHref","useLocation","state","from","id","useParams","useState","movies","setMovies","useEffect","fetchInfoAboutFilm","data","console","log","getFilm","title","overview","genres","release_date","vote_average","poster_path","to","src","contentURL","alt","map","gen","name","join","toFixed","Suspense","fallback","KEY","LANGUAGE","instance","axios","baseURL","fetchTrendFilms","page","get","response","status","Error","statusText","fetchSearchFilms","searchQuery","idFilm","fetchCreditsFilm","fetchReviewsFilm"],"sourceRoot":""}
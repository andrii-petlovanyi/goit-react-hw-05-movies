{"version":3,"file":"static/js/529.e9082ff4.chunk.js","mappings":"2PAEaA,EAAWC,EAAAA,EAAAA,GAAH,iHAMRC,EAAaD,EAAAA,EAAAA,EAAH,yCAIVE,EAAWF,EAAAA,EAAAA,EAAH,0CAIRG,EAAWH,EAAAA,EAAAA,KAAH,0CAIRI,EAAaJ,EAAAA,EAAAA,EAAH,+D,SCVVK,EAAc,SAAC,GAAqB,IAAD,IAAlBC,OAAAA,OAAkB,MAAT,CAAC,EAAQ,EACtCC,EAAwCD,EAAxCC,OAAQC,EAAgCF,EAAhCE,QAASC,EAAuBH,EAAvBG,OAAQC,EAAeJ,EAAfI,WACjC,OACE,UAACX,EAAD,YACE,UAACG,EAAD,uBAAoBK,MACpB,UAACN,EAAD,YACE,SAACE,EAAD,sBADF,IACgCK,MAEhC,UAACJ,EAAD,sBAAqBK,GAAkB,UACvC,UAACL,EAAD,oBACS,IAAIO,KAAKD,GAAYE,mBAAmB,cAItD,E,2BCtBYC,EAAcb,EAAAA,EAAAA,GAAH,+HAQXc,EAAed,EAAAA,EAAAA,GAAH,0CC4BzB,EAhCgB,WACd,IAAQe,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA0BL,GAA1B,mGAE2BM,EAAAA,EAAAA,IAAiBN,GAF5C,gBAEYO,EAFZ,EAEYA,KACRH,EAAWG,EAAKC,SAHpB,gDAKIC,QAAQC,IAAR,MALJ,yDADc,yBAAC,SAAD,2BASdC,CAAWX,EACZ,GAAE,CAACA,KAGF,+BACIG,EAAQS,OAAS,GACjB,SAACb,EAAD,0BAEA,UAACD,EAAD,YACE,SAACC,EAAD,4BACCI,EAAQU,KAAI,SAAAtB,GAAM,OACjB,SAACD,EAAD,CAA6BC,OAAQA,GAAnBA,EAAOS,GADR,QAO5B,C,uNClCKc,EAAM,mCACNC,EAAW,KAEJC,EAAa,kCAEpBC,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAAS,iCAGJ,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAA+BC,EAA/B,+BAAsC,EAAtC,kBAEoBJ,EAASK,IAAT,uCACWR,EADX,iBACuBO,EADvB,iBAFpB,UAKqB,OAHlBE,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,kCAQHjB,QAAQC,IAAR,MARG,kFAYA,SAAeiB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,4FAA6CP,EAA7C,+BAAoD,EAApD,kBAEoBJ,EAASK,IAAT,gCACIR,EADJ,kBACiBc,EADjB,iBACqCP,EADrC,qBACsDN,IAH1E,UAKqB,OAHlBQ,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,kCAQHjB,QAAQC,IAAR,MARG,kFAYA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,gGAEoBb,EAASK,IAAT,iBACXQ,EADW,oBACOhB,EADP,qBACuBC,IAH3C,UAKqB,OAHlBQ,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,gCAQHjB,QAAQC,IAAR,MARG,gFAYA,SAAeqB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,gGAEoBb,EAASK,IAAT,iBACXQ,EADW,4BACehB,IAHnC,UAKqB,OAHlBS,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,gCAQHjB,QAAQC,IAAR,MARG,gFAYA,SAAeJ,EAAtB,+CAAO,OAAP,oBAAO,WAAgCwB,GAAhC,gGAEoBb,EAASK,IAAT,iBACXQ,EADW,4BACehB,IAHnC,UAKqB,OAHlBS,EAFH,QAKUC,OALV,yCAKiCD,GALjC,aAMG,IAAIE,MAAMF,EAASG,YANtB,gCAQHjB,QAAQC,IAAR,MARG,gF","sources":["components/ReviewsItem/ReviewsItem.styled.js","components/ReviewsItem/ReviewsItem.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","service/api/fetchFilms.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  border: 1px solid rgba(255, 255, 255, 0.18);\n  border-radius: 5px;\n  padding: 10px;\n`;\n\nexport const ReviewText = styled.p`\n  color: white;\n`;\n\nexport const TextName = styled.p`\n  color: orange;\n`;\n\nexport const TextWrap = styled.span`\n  color: orange;\n`;\n\nexport const RatingText = styled.p`\n  color: orange;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  ListItem,\n  RatingText,\n  ReviewText,\n  TextName,\n  TextWrap,\n} from './ReviewsItem.styled';\n\nexport const ReviewsItem = ({ review = {} }) => {\n  const { author, content, rating, created_at } = review;\n  return (\n    <ListItem>\n      <TextName> Author: {author}</TextName>\n      <ReviewText>\n        <TextWrap>Review:</TextWrap> {content}\n      </ReviewText>\n      <RatingText>Rating: {rating ? rating : 'N/A'}</RatingText>\n      <RatingText>\n        Date: {new Date(created_at).toLocaleDateString('en-US')}\n      </RatingText>\n    </ListItem>\n  );\n};\n\nReviewsItem.propTypes = {\n  review: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    created_at: PropTypes.string.isRequired,\n  }),\n};\n","import styled from '@emotion/styled';\n\nexport const ListReviews = styled.ul`\n  padding-left: 25px;\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n  list-style: none;\n`;\n\nexport const TitleReviews = styled.h1`\n  color: orange;\n`;\n","import { ReviewsItem } from 'components/ReviewsItem/ReviewsItem';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviewsFilm } from 'service/api/fetchFilms';\nimport { ListReviews, TitleReviews } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState();\n\n  useEffect(() => {\n    async function getReviews(id) {\n      try {\n        const { data } = await fetchReviewsFilm(id);\n        setReviews(data.results);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getReviews(id);\n  }, [id]);\n\n  return (\n    <>\n      {!reviews.length > 0 ? (\n        <TitleReviews>No reviews</TitleReviews>\n      ) : (\n        <ListReviews>\n          <TitleReviews>Users reviews</TitleReviews>\n          {reviews.map(review => (\n            <ReviewsItem key={review.id} review={review} />\n          ))}\n        </ListReviews>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst KEY = '07f482c2b5e827c5b265fd8211004d21';\nconst LANGUAGE = 'uk';\n\nexport const contentURL = 'https://image.tmdb.org/t/p/w500';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport async function fetchTrendFilms(page = 1) {\n  try {\n    const response = await instance.get(\n      `/trending/movie/week?api_key=${KEY}&page=${page}&language=uk`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchSearchFilms(searchQuery, page = 1) {\n  try {\n    const response = await instance.get(\n      `/search/movie?api_key=${KEY}&query=${searchQuery}&page=${page}&language=${LANGUAGE}`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchInfoAboutFilm(idFilm) {\n  try {\n    const response = await instance.get(\n      `/movie/${idFilm}?api_key=${KEY}&language=${LANGUAGE}`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchCreditsFilm(idFilm) {\n  try {\n    const response = await instance.get(\n      `/movie/${idFilm}/credits?api_key=${KEY}`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchReviewsFilm(idFilm) {\n  try {\n    const response = await instance.get(\n      `/movie/${idFilm}/reviews?api_key=${KEY}`\n    );\n    if (response.status === 200) return response;\n    throw new Error(response.statusText);\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["ListItem","styled","ReviewText","TextName","TextWrap","RatingText","ReviewsItem","review","author","content","rating","created_at","Date","toLocaleDateString","ListReviews","TitleReviews","id","useParams","useState","reviews","setReviews","useEffect","fetchReviewsFilm","data","results","console","log","getReviews","length","map","KEY","LANGUAGE","contentURL","instance","axios","baseURL","fetchTrendFilms","page","get","response","status","Error","statusText","fetchSearchFilms","searchQuery","fetchInfoAboutFilm","idFilm","fetchCreditsFilm"],"sourceRoot":""}